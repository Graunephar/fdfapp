package actions

import (
	"errors"
	"fmt"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/mogensen/fdfapp/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (ClassMembership)
// DB Table: Plural (class_memberships)
// Resource: Plural (ClassMemberships)
// Path: Plural (/class_memberships)
// View Template Folder: Plural (/templates/class_memberships/)

// ClassMembershipsResource is the resource for the ClassMembership model
type ClassMembershipsResource struct {
	buffalo.Resource
}

// Destroy deletes a ClassMembership from the DB. This function is mapped
// to the path DELETE /class_memberships/{class_membership_id}
func (v ClassMembershipsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Allocate an empty ClassMembership
	classMembership := &models.ClassMembership{}

	// To find the ClassMembership the parameter class_membership_id is used.
	if err := tx.Find(classMembership, c.Param("class_membership_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(classMembership); err != nil {
		return err
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", T.Translate(c, "classMembership.destroyed.success"))
	// Redirect to the class_memberships index page
	x := fmt.Sprintf("/participants/%s", classMembership.ParticipantID)
	return c.Redirect(302, x)
}
