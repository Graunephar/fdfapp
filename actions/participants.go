package actions

import (
	"errors"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/mogensen/fdfapp/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Participant)
// DB Table: Plural (participants)
// Resource: Plural (Participants)
// Path: Plural (/participants)
// View Template Folder: Plural (/templates/participants/)

// ParticipantsResource is the resource for the Participant model
type ParticipantsResource struct {
	buffalo.Resource
}

// List gets all Participants. This function is mapped to the path
// GET /participants
func (v ParticipantsResource) List(c buffalo.Context) error {
	participants := &models.Participants{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := scope(c).PaginateFromParams(c.Params())

	// Retrieve all Participants from the DB
	if err := q.All(participants); err != nil {
		return err
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, participants))
}

// Show gets the data for one Participant. This function is mapped to
// the path GET /participants/{participant_id}
func (v ParticipantsResource) Show(c buffalo.Context) error {
	// Allocate an empty Participant
	participant := &models.Participant{}

	// To find the Participant the parameter participant_id is used.
	if err := scope(c).Eager().Find(participant, c.Param("participant_id")); err != nil {
		return c.Error(404, err)
	}

	if err := bindClasses(c); err != nil {
		return errors.New("No Classes found")
	}
	c.Set("classMembership", &models.ClassMembership{})

	return c.Render(200, r.Auto(c, participant))
}

// New renders the form for creating a new Participant.
// This function is mapped to the path GET /participants/new
func (v ParticipantsResource) New(c buffalo.Context) error {

	if err := bindClasses(c); err != nil {
		return err
	}

	return c.Render(200, r.Auto(c, &models.Participant{}))
}

// Create adds a Participant to the DB. This function is mapped to the
// path POST /participants
func (v ParticipantsResource) Create(c buffalo.Context) error {
	// Allocate an empty Participant
	participant := &models.Participant{}

	// Bind participant to the html form elements
	if err := c.Bind(participant); err != nil {
		return err
	}
	participant.UserID = currentUser(c).ID

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.Eager().ValidateAndCreate(participant)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, participant))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", T.Translate(c, "participant.created.success"))
	// and redirect to the participants index page
	return c.Render(201, r.Auto(c, participant))
}

// Edit renders a edit form for a Participant. This function is
// mapped to the path GET /participants/{participant_id}/edit
func (v ParticipantsResource) Edit(c buffalo.Context) error {
	// Allocate an empty Participant
	participant := &models.Participant{}

	if err := scope(c).Find(participant, c.Param("participant_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, participant))
}

// Update changes a Participant in the DB. This function is mapped to
// the path PUT /participants/{participant_id}
func (v ParticipantsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Allocate an empty Participant
	participant := &models.Participant{}

	if err := scope(c).Find(participant, c.Param("participant_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Participant to the html form elements
	if err := c.Bind(participant); err != nil {
		return err
	}
	// Make sure that the userid is not overridden by the Bind call
	participant.UserID = currentUser(c).ID

	verrs, err := tx.ValidateAndUpdate(participant)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, participant))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", T.Translate(c, "participant.updated.success"))
	// and redirect to the participants index page
	return c.Render(200, r.Auto(c, participant))
}

// Destroy deletes a Participant from the DB. This function is mapped
// to the path DELETE /participants/{participant_id}
func (v ParticipantsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Allocate an empty Participant
	participant := &models.Participant{}

	// To find the Participant the parameter participant_id is used.
	if err := scope(c).Find(participant, c.Param("participant_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(participant); err != nil {
		return err
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", T.Translate(c, "participant.destroyed.success"))
	// Redirect to the participants index page
	return c.Render(200, r.Auto(c, participant))
}
